name: Deploy to Neocities & Post to Mastodon

on:
  push:
    branches:
      - master

concurrency: # Prevent concurrent deploys doing strange things
  group: deploy-to-neocities
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1.0'

    - name: Cache Ruby gems
      uses: actions/cache@v3
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install Bundler
      run: gem install bundler -v 2.4.22

    - name: Install dependencies
      run: bundle install --path vendor/bundle

    - name: Build static site
      run: bundle exec jekyll build

    - name: List _site directory
      run: ls -la _site

    - name: Deploy to Neocities
      uses: bcomnes/deploy-to-neocities@v2.0.2
      with:
        api_token: ${{ secrets.NEOCITIES_API_KEY }} # Uses API key from Neocities
        cleanup: false
        dist_dir: _site

    - name: Check for new posts, notes, and logs
      id: check_new_content
      run: |
            current_date=$(TZ=America/New_York date +%Y-%m-%d)
            base_url="https://mkultra.monster"
            echo "Current date: $current_date"
            new_content=()
            for file in $(git log --diff-filter=A --name-only HEAD); do
              echo "Checking file: $file"
              if [[ $file == _posts/* || $file == _notes/* || $file == _logs/* ]]; then
                echo "File is in _posts, _notes, or _logs directory"
                post_date=$(basename $file | cut -d'-' -f1-3)
                post_year=$(basename $file | cut -d'-' -f1)
                post_month=$(basename $file | cut -d'-' -f2)
                post_day=$(basename $file | cut -d'-' -f3)
                post_title=$(basename $file | cut -d'-' -f4- | sed 's/\.md$//')
                if [[ $file == _posts/* ]]; then
                  post_category=$(grep -m 1 '^categories:' $file -A 1 | tail -n 1 | sed 's/- //;s/"//g' | tr '[:upper:]' '[:lower:]')
                  post_category=$(echo $post_category | sed 's/ /%20/g')
                  post_url="$base_url/$post_category/$post_year/$post_month/$post_day/$post_title.html"
                elif [[ $file == _notes/* ]]; then
                  post_url="$base_url/notes/$post_year/$post_month/$post_day/$post_title.html"
                elif [[ $file == _logs/* ]]; then
                  post_url="$base_url/logs/$post_year/$post_month/$post_day/$post_title.html"
                fi
                echo "Post URL: $post_url"
                echo "Post date: $post_date"
                echo "Current date: $current_date"
                if [[ $post_date == $current_date ]]; then
                  new_content+=("$post_url")
                  echo "New content detected: $post_url"
                else
                  echo "Post date does not match current date"
                fi
              else
                echo "File is not in _posts, _notes, or _logs directory"
              fi
            done
            echo "new_content=${new_content[@]}" >> $GITHUB_ENV
            echo "New content: ${new_content[@]}"
            echo "New content array: ${new_content[@]}"

    - name: Start SSH agent
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Post to Mastodon
      if: env.new_posts != ''
      env:
        MASTODON_API_KEY: ${{ secrets.MASTODON_API_KEY }}
        NEW_POSTS: ${{ env.new_posts }}
      run: |
        for post_url in $NEW_POSTS; do
          echo "Posting to Mastodon: $post_url"
          ssh -o StrictHostKeyChecking=no root@67.205.188.225 "source ~/masto-poast/masto-poast-env/bin/activate && MASTODON_API_KEY=${{ secrets.MASTODON_API_KEY }} python3 ~/masto-poast/poast.py '$post_url'"
        done